# date: Mon Jan 22 17:08:09 PST 1990 (dredge@hitchrack)
 
##----------------------------------------------------------------------
##  Copyright 1986 by
##  The Board of Trustees of the Leland Stanford Junior University
##  All rights reserved.
##
##  This routine may not be used without the prior written consent of
##  the Board of Trustees of the Leland Stanford University.
##----------------------------------------------------------------------

# VERSION 3.1 PLOTCAP FORMAT.
# If your program doesn't like this file, reload it and it will get
# the new gplot/plotcap routines that do like this. (mje dec 86)

#
# WARNING!!!! DO NOT EDIT THIS FILE. IT IS CREATED FROM MANY SEPARATE
#   FILES IN THE GPLOT SOURCE DIRECTORY.
# To add a new entry to Plotcap, create the entry in a file of its own and
#   put it in the gplot source directory for plotcap source and then
#   run Mkplotcap. (dredge@Oasis.Stanford.Edu)
#
# OR: if you do make changes or additions, send them to:
#		dredge@oasis.STANFORD.EDU
#		{ucbvax,decwrl,hplabs}!shasta!oasis!dredge
#		{ucbvax,decwrl,hplabs}!glacier!oasis!dredge

# -----------------------------------------------------------------------------
# This file should be called something like:
#		plotcap.std
# Then to make local alterations, create a file called:
#		plotcap
# which could look like:
#	# When we finish with this continue on to the standard file.
#	%next "plotcap.std"
#	printer:	LIKE="printronix"::
#	lw0:		FILE="|lpr -Plw0": LIKE="lw"::
#	lw1:		FILE="|lpr -Plw1": LIKE="lw"::
#	lw2:		FILE="|lpr -Plw2": LIKE="lw"::
#	test_dev:
#		...
#		:
# -----------------------------------------------------------------------------


# ----------------------------------------------------------------------
#
# Some standard definition names. Set up entries like this in the
#  local plotcap file.
# 
default:	LIKE="hp2648"::
save:		LIKE="gplot-raw"::
null:		VECT::			# Funky null device.

# ----------------------------------------------------------------------
#
# Plotcap plot device definitions....
#


 
# Imagen / canon laser printer.  This is a vector device.
#  07jul85 dredge@fuji : For some reason, when the byte count in a DRAW 
#	sequence is the first thing in the output buffer, the byte count
#	ends up 0 (using 'deco' or something).  I can't figure out why
#	this is so.  Even with the debug stuff in the DRAW stuff (ie: ._DUMP)
#	the count in r4 seems to be non-zero.  Well the cheap fix is to 
#	put the "Begin-Keep" before the 0346 at the beginning of the DRAW.
#	This ensures that the byte count will not be the first thing in 
#	the output buffer.
# written:  Michael Eldredge (dec 84)
# modified: Michael Eldredge (may 86) rev3 format.
ip | imagen | canon:          # gen an '.imp' file to go to the canon
	VECT:
	# draw(346), point-count(#), prev-pnt(@0), pnts(*), pen(017)
	DRAW= "\346"; 
	      {
		r3=OB; r4=0; %W=r4; 
		.P0; pnts; .P1;		# move to prev point.
		*pnts;			# draw points
		%W@r3=r4;		# Now put back the number of pnts
	       } ;
		"\352\017":
	FILE= "| lpr -Pip" :
	IGPO:             # ignore post calls.
	# Imagen header
	INIT=	'@Document(Language ImPress, GraphsBy "gplot")' ;
		"\323\315\035\350\002":
	#    PUSH-^   ^-Rotate/Invert axes
	#                      ^-Pen size (02)
	PCLR= "\333":
	PEN= "\350"; r0 = S & 017; r0? != $1; r0=1; 1$; %B = r0:  # pen size.
	PEND= "\324\333\377":
	#       ^POP state.
	PIXX=2640:
	PIXY=2040:
	pnts=  r4=r4+1; %W=I; %W=J:
	PUNX=240:
	PUNY=240:
	TRANX=0.1:
	TRANY=0.375:	# 3/8 inch offset.
	:

# test some reported problems with the imagen entry.
canon_test | tcan:          # gen an '.imp' file to go to the canon
	DRAW= "\346"; {
		r3=OB; r4=0; %W=r4; 
		.P0; pnts; .P1;
		*pnts;
		%W@r3=r4;
		r4 ? != $1 ;
		r7 = OB;
		._DUMP ;
	   1$;
		}; "\352\017":
	LIKE = "imagen":
	:
 
# HP DGL interface to the Head on the HP9000 work stations.
# This is a kludge to avoid loading the billions and billions of bytes
#    of DGL code on the 9000s (since there is no other known interface
#    to the high speed tops).  It requires the program 'dgldrv' which
#    is a DGL driver program we wrote taking input of the form we are
#    outputting here and calling the correct DGL routines.  It is loaded
#    with said DGL library code.
# written: Michael Eldredge & Mark Law (before aug 84).
dgl | hphead | hptop:
	VECT:
	INIT="I\000":
	PEND="e\000":
	DRAW="d\000"; %W=I; %W=J:
	MOVE="m\000"; %W=I; %W=J:
	PCLR="c\000":
	PLCL="p\000":
	LINE="l\000"; %W=S:
	PUNX=74:
	PUNY=74:
	PIXX=560:
	PIXY=455:
	:
 
# ditroff: Generate di-troff plotting calls, al'la PIC.
# 	This can be .so (sourced) into your ditroff file for figures, etc...
# To change the size, you just need change PIXX, PIXY, and r6,r7 in INIT.
#
# Original: Michael Eldredge (sep 85)
# modified: Michael Eldredge (aug 88) clean-up, rename Start/Stop macros.
ditroff | dit | dit4x3:		# 4" by 3"
	VECT:
	PIXX=2304:	# Make it a 6" box
	PIXY=1728:
	PUNX=576: PUNY=576:
	# ---------------------------------
	# everything below here is based on r6==PIXX and r7==PIXY
	INIT=	r6 = I;	# I==PIXX
		r7 = J;	# J==PIXY
		:
	PLOP=	".\\\" ------- ditroff figures by dplot --------\n";
		".\\\" D(it) f(igure) - start\n";
		".Df "; %d=r6; " "; %d=r7; "\n.br\n";
		:
	PLCL=	".sp 1+"; %d=r7; "u\n.De\n";
		".\\\" D(it) e(end) - finish figure\n";
		:
	DRAW=	.P0; move; .P1; r0=I-r0; r1=r7-J-r1; draw; "\n.sp -1\n":
	draw=	"\\D'l"; %d=r0; "u "; %d= r1; "u'":
	move=	"\\h'";  %d=I ; r0=I; "u'\\v'"; r1=r7-J ; %d=r1; "u'":
	:

dit5x5:		# 5" by 5" -- based on the standard size.
	PIXX=2880:
	PIXY=2880:
	LIKE= "ditroff":
	:

# ditroff2: Generate more pic like calls for di-troff.
# written: Michael Eldredge (sep 85)
#	NOTE: This does not work. Use the above.
ditroff2:
	VECT:
	PIXX=3456:	# Make it a 6" box
	PIXY=3456:
	PUNX=576: PUNY=576:
	INIT=	"... 0 -5 5 0 0 0 4096 4096\n";
		"... 0u 2880u 2880u 0u 0u 0u 2359296u -2359295u\n" :
	PLOP=	".PS 2880 2880\n.br\n":
	PLCL=	".sp 1+2880u\n.PE\n":
	# Try not to use \D sequences if we can use horz or vert movements.
	DRAW=	.P0; move; .P1; *draw :
	# r0,r1 is prev point, and r2,r3 will be draw-to-segment
	draw=	r2=I-r0; r3=2880-J-r1;		# new segment.
		r2 ? != $1 ;
			vert ;		# delta-x is zero
			$3;
	   1$;	r3 ? != $2 ;
			horz ;		# detla-y is zero
			$3;
	   2$;		diag ;			# draw a diag
	   3$;	r0 = I ; r1 = J ;	# save for next time.
		"\n.sp -1\n"
		:
	diag=	"\\D'l"; %d=r2; "u "; %d= r3; "u'":
	vert=	"\\v'-.25m'\L'"; %d= r3; "u\\(br'\\v'.25m'":
	horz=	"\\l'"; %d=r2; "u'":
	move=	"\\h'"; %d=I; r0=I; "u'\\v'"; r1=2880-J; %d=r1; "u'":
	:
 
# Gplot raw save format
gplot-raw|gpsave:
	SAVE:
	FILE="g??????.gp":	# make a unique file name.
	:
 
# HP Lineprinter. Raster mode.
# written: Michael Eldredge & Mark Law (jan 85).
hplp | lp2563:
	RAST:
	RREV:		# Set pixels in reverse order (lo to hi).
	INIT=	"\E*ra" :
	PEND=	"\E*rb^L" :
	BFSZ=132:
	BFOP=	"\E*b79W" :	# Begin a raster row.
	FILE=	"lp.out" :
	PCLR=	"^L" :	# In and out of Plot mode needed????? (mje)
	#PIVL=0:	# Doesn't like the 0 value for some reason.
	PIXX=640:
	PIXY=640:
	PUNX=70:
	PUNY=70:
	RPXB=8:		# Bits/output byte.
	# how about a RasterROW capability?
	#BFOP=	"\E*b"; { r3=OB; %d=r4; "W"; r4 = BC :
	#BFCL=  %d@r3 = BC - r4; } :
	#RROW=	"\E*b"; { r3=OB; %3d=r4; "W"; r4=BC; .ROW; %3d@r3=BC-r4 } :
	:
 
# 2623 scaled for plotting 2648 sized plots.
#   20jun85 dredge@fuji.  This is jive, just for fun....
hp83:
	SCALX=0.70:
	LIKE="hp2623":
	:

# This wizzy new hp2623s......
# written: Michael Eldredge (jan 85)
hpg | hp2623 | 2623 | hp2623a | 2623a:
	CLOC=	"\E*s4^"; .READ; I=%d; J=%d; S=%d :
	PIXX=512:
	PIXY=390:
	PUNX=64:
	PUNY=60:
	LIKE=	"hp2648":
	:
 
# hp2648 outputting points in binary absolute format.
# written: Michael Eldredge (jan 84)
# mod #1 : MJE (apr 86) made gtoa & pend=\EZ (was =Z) to stop stray 'Z's
#   from showing up on hp terminals.
hp | hp2648 | 2648 | hp2648-binary | hp2648a | 2648a:     # 16jan84
	VECT:
	BFSZ=80:                # max buffering is 80 chars total.
	CLOC=	"\E*s4\^\021";  .READ; I=%d; J=%d; S=%d :
	DRAW=	"\E*pia"; .P0; pnts; .P1 ; *pnts :
	#		   ^Set point flag.
	#DRAW=	"\E*pi"; *pnts:	# The above draw is much better than these...
	#MOVE=	"\E*pia"; pnts:	#  ... 2 move/draw.
	GTOA=	"\EZ":
	ICLR:			# clearing before any drawing is OK.
	INIT=	"\E*mr4a\E*dc":      # 'r':defaults, '4a':jam, 'dc':graph on
	PEND=	"\EZ":
	LINE=	"\E*m";
		r0 = S ;
		r0 ? != $1;		# Prevent Linetype=0
		r0 = 1 ;
	   1$;  %2d=r0;
		"b":
	MCLR=	"\E*m1a":		# Draw mode to clear pixels.
	MCMP=	"\E*m3a":		# Draw mode to complement pixels.
	MSET=	"\E*m4a":
	PCLR=	"\E*da":
	PIXX=720:
	PIXY=360:
	pnts=	%B= I[9-5]+040; %B= I[4-0]+040; 
		%B= J[9-5]+040; %B= J[4-0]+040:
	PUNX=72:
	PUNY=72:
	:

# Try some stuff with the IB devices.
#    07jul85 dredge@fuji:  NOTE: This DOES NOT WORK!!!  Trying to read from
#	the tablet on the IB of an HP2648 terminal.
# written: Michael Eldredge & S.E.Hansen (apr 85)
hpp:
	USR1=	r0=1 ; hpib; "\E&p5u0C":
	USR2=	r0=6 ; hpib; "\E&p5dWIN;OI^J\E&p5s0R";
		._DUMP; .READ; r7=%d; ._DUMP:
#	USR2=	r0=6 ; hpib; "\E&p5dWBP24,1500,5^J\E&p5dWBP34,1000,4^J":
	CLOC=	r0=6 ; hpib; "\E&p5dWRC^J\E&p5sr";
		.READ; r0=%d; r1=%d; r2=%d; r3=%d; r4=%d; r5=%d; ._DUMP:
#	CLOC=	r0=6 ; hpib; "\E&p5dWSG^J\E&p5dWOS^J\E&p5sR"; 
#		.READ;r7=%d; ._ABORT;
#		"\E&p5dWOD^J\E&p5sR"; .READ;
#		S=%1d; I=%1d; J=%1d; ._DUMP:
	#CLOC=	r0=6 ; hpib; "\E&p5\^^Q"; .READ; r0=%L; S=%1d; I=%1d; J=%1d:
	#CLOC=	"\E&p5u6p1C\E&p5u6p2C\E&p5D\E&p5\^^q"; .READ; ._ABORT:
	hpib=	"\E&p5u"; %1d=r0; "p1C\E&p5u"; %1d=r0; "p2C":
	# GTOA=	"Z"; ._ABORT:
	LIKE=	"hp2648":
	:
 
# Hp desk top plotter, never tested !!!!
HPdesk | HP2671g:
	RAST:
	INIT="\E*rA":
	PEND="\E*rB":
	BFOP="\E*b";  r3=OB; %B=r4; "W"; r4=OB:
	BFCL=%B@r3 = OB - r4 :
	PIXX=720:
	PUNX=90:
	PUNY=90:
	RPXB=8: 
	:
 
# This is the wizzy new hp plotter, a 9872c....
# written: Michael Eldredge (jan 85)
hpplt | hp9872 | 9872 | hp9872C | 9872C:
	VECT:
	INIT=	"IN;" :
	PEND=	"PU;" :
	PCLR=	"PU;" :
	PLCL=	"PU;" :
	GTOA=	"PU;" :
	FILE=	"/dev/plotter" :
	DRAW=	"PU;"; .P0; { pnts; .P1; "PD;"; *pnts; "PU;";  } :
	pnts=	"PA"; %d=I; ","; %d=J; ";" :
	LINE=	"SP";
		r0 = S ;
		r0? != $1;	# avoid linetype=0
		r0 = 8 ;
	    1$; %d = r0 ;
		";" :
	PIXX=7620:
	PIXY=10160:
	PUNX=1016:
	PUNY=1016:
	:
 
# HP ThinkJet Printer, Raster Mode.
# written: Michael Eldredge & Mark Law (aug 85)
hpjet | thinkjet | jet:
	RAST:
	RREV:		# Set pixels in reverse order (lo to hi)
	INIT=	"\E*r1280S\E*ra" :
	PEND=	"\E*rB^L" :
	BFSZ=132:
	BFOP=	"\E*b159W" :	# Begin raster mode.
	FILE=	"/dev/hpjet" :
	PCLR=	"^L" :
	#PIVL=0:	# !! Doesn't like 0 value for some reason.
	PIXX=1280:
	PIXY=640:
	PUNX=192:
	PUNY=96:
	RPXB=8:		# Bits output/byte.
	:
 
# The Apple LaserWriter (dredge@fuji 20feb86)
# written: Michael Eldredge (jul 85)
# notes:
#	. Uses r4 as page count.
#	. Creates a PostScript file.
#	. Uses landscape mode. (page set the long way)
#	. Scaling is done by 5.  This is because the device is 300 dot/in
#	  and PostScript thinks in Points (72/in).  It will convert anyway,
#	  so we scale it to 360 dot/in. ......Thus the funny numbers for
#	  PUN? and PIX?.
# Note:
#	. could define the Move to save its move-to point and (somehow)
#	  look at the last point before the Stroke command.  If the saved
#	  move-to point and the last draw-to-before-stroke are the same
#	  point, use a "closepath" command. (mje feb 86)
# mod: mje (dec 85) added the PEN capability.
# mod: mje (feb 86) scale PEN by 2 (was 10)
# mod: mje (feb 86) added the 'def's for move-to and line-to, saves space.
# mod: mje (feb 86) altered 3/4" offset translation.
# mod: mje (jul 86) fix PCLR (via Dick Roy) and setlinejoin.
# mod: mje (aug 87) Fix prolog commands for PostScript2.0.  Got
#	%%Pages:  working.
# mod: mje (may 88) Fixed margins for those that write right to the edge.
# mod: mje,conor rafferty -- stanford (aug 88) Added conor's area fill
#	code.

lw|ps|PostScript|laserwriter:
	VECT:
	IGPO:             # ignore post calls.
	DRAW=	.P0; movept; .P1 ;
		*drawpt;
		"ST\n":
	movept=	%d=I; " "; %d=J; " M\n":
	drawpt=	%d=I; " "; %d=J; " D\n":
	FILE=	"| lpr" :		# Send to $PRINTER or default
	#FILE=	"| lpr -Pale" :		# Send to the printer "ale"
	INIT=	r4 = 0;			# Page count.
		"%!PS-Adobe-1.0\n" ;
		"%%Pages: (atend)\n";
		"/M  {moveto} def\n" ;	# make ps file smaller by
		"/D  {lineto} def\n" ;	# defining some macros for move, draw,
		"/ST {stroke} def\n" ;  #  and stroke.
		"90 rotate\n" ;		# Landscape mode
		"/in {360 mul} def\n" ;
		".2 .2 scale\n" ;	# 0.2 = 72/360
		# make room for the margins 1/4" and 3/8".
		"0 0.25 add in -8.5 0.375 add in translate\n" ;
		"1 setlinejoin\n";
		"%%EndProlog\n";
		:
	PEND=	"%%Trailer\n%%Pages: "; %d = r4; "\n"
		:
	PLOP=	r4 = r4+1; "%%Page: "; %d = r4; " "; %d = r4; "\n";
		"newpath\n";		# stroke does 'newpath'
		:
	PLCL=	"copypage erasepage\n":
	PIXX=3780:	# 10.5"  (Room for margins)
	PIXY=2880:	#  8.0"
	PUNX=360:
	PUNY=360:
	PEN=	%d = S & 31 * 2 ; " setlinewidth\n" :
	AREA=	.P0; movept; .P1; *drawpt; " closepath fill\n":
	FILS=	"0."; %d = S; " setgray\n":
	:
 
 
# Various entries that can/do/will help make movies......



# Sun Framedemo Frames -- framedemo program can slurp these up...
# written:  17 nov 86 (mje & mel)
frames:
	RAST:
	FILE=	"frame.xxx" :
	RREV:
	PIVL=0:              # mask for each byte to be sent out
	# Note BUG in counting for 512!!!!!!!!
	PIXX=513:             # should be 780 or a little less
	PIXY=513:
	PUNX=30:
	PUNY=30:
	RPXB=8:                 # all 8 pixels per byte out.
	:
	
 
# MS-DOS kermit
# Wed Jan 10 14:14:29 PST 1990 (dredge--stanford)
mskermit|kermit:
	INIT=	"\E^L":		# go to tek mode and clear screen
	GTOA=	"^X":
	ATOG=	"\E[?38h":	# go to tek mode (no screen clear)
	!PEND=	"^X":		# \E[?38l works, too.
	PLCL=	"^G"; .READ; "^X":	# Pause; term mode (\E[?38l ok too)
	!AREA: !FILS:
	LIKE=	"tek4100":
	:
 
# PIC entry
# to simulate floating point, all numbers are multiplied by a=0.001
# this is a necessary kludge because pic doesn't like 6000 inch pages
#  and because gplot can't output float yet.
# This is just a demo.  For what this is trying to do, use the "ditroff"
#	entry.
# Written: Conor Rafferty  and Michael Eldredge (sep 85) 
pic :
	VECT:
	PIXX=6000:	# Make it a 6" box
	PIXY=6000:
	PUNX=1000: PUNY=1000:
	PLOP=".PS\na=0.001\n":	#This was supposed to be PLOP? PLPN?
	PLCL=".PE\n":
	#DRAW="line to ("; %d=I; ", "; %d=J; ")\n" :
	#MOVE="move to ("; %d=I; ", "; %d=J; ")\n" :
	# Conor: This may be more efficent (if pic works this way!):
	#	Leave move undefined, and do draw as:
	DRAW="move to "; .P0; pnt1; .P1; *pnts:
	pnts="\tline to "; pnt1:		# Continued points in a draw.
	pnt1="(a*"; %d=I; ", -a*"; %d=J; ")\n":	# Format for a single point.
	:
 
# Printronix - raster mode - lineprinter.
#   07jul85 dredge@fuji: The -v option to lpr is used to schedule a filter
#	that simple copies wholesale the binary raster for from stdin to
#	stdout.  This filter is called /usr/local/lib/lprast on Fuji.
#	Go ahead and take it.
# written: Michael Eldredge (jun 84)
printronix:		# printronix raster lineprinter
	DFLG=2:		# debug flag.
	RAST:
	BFCL=	"\005\012" :
	FILE=	"| lpr -v" :		# pipe output to the spooler.
	#INIT=	"\005\014" :
	PEND=	"\014\014" :		# page eject after last plot....
	PCLR=	"\014" :
	PIVL=0100:              # mask for each byte to be sent out
	PIXX=720:             # should be 780 or a little less
	PIXY=720:
	#PLOP=	"\014" :
	PUNX=60:
	PUNY=72:
	RPXB=6:                 # only 6 pixels per byte out.
	:
 
# raster lp, just send '!' as pixel on.
#   (Another of the `fun' devices)
rlp:
	RAST:
	BFCL=	"\n":
	FILE=	"| lpr":
	PIXX=130:  PIXY=65:
	PUNX=13:   PUNY=13:
	RPXB=1:
	PIVL=040:	# space. set bits will be 041 == '!'
	:
 
# Tektronix 401x series
# written: Michael Eldredge (jan 85)
tek4010 | tek4014 | 4010 | 4014 :
	VECT:
	ICLR:
	PCLR=	"\E^L" :              # clear the screen.
	PIXX=1024:		# just guessing...
	PIXY= 780:
	PUNX=96:
	PUNY=96:
	DRAW=	"\035";  .P0; pnts; .P1; *pnts; "\037" :
	pnts=	%B = J[ 9-5] + 040  ;
	        %B = J[ 4-0] + 0140 ;
     	        %B = I[ 9-5] + 040  ;
	        %B = I[ 4-0] + 0100 ;
		:
	:

 
# Tektronix 410x series with the tablet in Port 0.
# written: Michael Eldredge (jan 85)
tekt | tek4107t | tekct:
	#INIT=	"\E%!0\EJQP0:";  .READ; ._DUMP:
	# \EIEx1 :: x=0 locate joystick, x=8 locate port 0.
	CLOC=	"\EIE81";
		.READ; 
		S=%B;
		J=%B & 037 < 7; r1=%B; r2=%B & 037 < 2 ; 
		I=%B & 037 < 7;        r4=%B & 037 < 2 ;
		J = r1 > 2 & 03 | J | r2;
		I = r1     & 03 | I | r4;
		.READ ;
		:
	LIKE=	"tek4107" :
	:
	
# Tektronix 410x series.
# written: Michael Eldredge (jan 85)
tek4100 | tek4107 | tekc | Xl | XS | tek4105 | 4105 | tek4106 | 4106:
	VECT:
	USR1=	"\EJQP0:";  .READ; .READ; ._DUMP:
	# this init is to try to auto-config. It doesn't work, but should.
	# see if there is a tablet connected.
	#INIT=	"\E%!0\EJQP0:";  .READ; ._DUMP:
	# \EIEx1 :: x=0 locate joystick, x=8 locate port 0.
	CLOC=	"\EIE01";
		.READ; 
		S=%B;
		J=%B & 037 < 7; r1=%B; r2=%B & 037 < 2 ; 
		I=%B & 037 < 7;        r4=%B & 037 < 2 ;
		J = r1 > 2 & 03 | J | r2;
		I = r1     & 03 | I | r4;
		.READ ;
		:
	AREA=	"\ELP"; .P0; pnts; .P1; "0\035";  *pnts; "\037\ELE" :
	ATOG=	"\E%!0" :       # TEK  (graphics) mode ;
	DRAW=	"\035";  .P0; pnts; .P1; *pnts; "\037" :
	FILS=	"\EMP";  %B= S[9-4] | 0100; %B= S[3-0] | 040:
					   	     # | 060 for positive
	GTOA=	"\E%!1" :       # ANSI mode.
	ICLR:
	INIT=	"\E%!0" :       # TEK  (graphics) mode ;
	LINE=	"\EML";  %B= S & 017 | 060:		    # colour of line.
	MCLR=	"\EML\060" :		# Line type 0 for clear mode.
	MSET=	"\EML\061" :		# Line type 1 for clear mode.
	PCLR=	"\E^L" :              # clear the screen.
	PEND=	"\E%!1" :       # ANSI mode.
	PIXX=4095:
	PIXY=3131:
	pnts=	%B = J[11-7] + 040  ;
	        %B = J[ 1-0] < 2 | I[1-0] | 0140 ;
	        %B = J[ 6-2] + 0140 ;
     	        %B = I[11-7] + 040  ;
	        %B = I[ 6-2] + 0100 ;
		:    # the new funky point encoding scheme.
	PUNX=410:
	PUNY=392:
	:

# Like the tekc entry, but keeps some dialog area always visible.
# written: Michael Eldredge (jul 84).
tekc2 :
	INIT=	"\E%!0\ELL6" :		# dialog area to 6 lines.
	ORGY=	800:
	PEND=	"\ELLB0\E%!1" :		# back to 32 (B0) lines.
	LIKE=	"tek4100" :
	:


# Set up a color table for the 410x series.
# written:  Mark Law (dec 86)
tekc-ct | tek4100-color-table :
	INIT=	"\E%!0";
		"\ETG140000";
		"\ETG1410F40";
		"\ETG142L8A>F4";
		"\ETG143R<C2F4";
		"\ETG144K4C2F4";
		"\ETG1480A>F4";
		"\ETG1490C2F4";
		"\ETG14:0E0F4";
		"\ETG14;C2C2F4";
		"\ETG14>E0C2F4";
		"\ETG14?E:C2F4";
		"\ETG14<J0C2F4";
		"\ETG14=H2E0F4" :
	LIKE=	"tek4100" :
	:

 
# This is basically the tek4107, except it is intended to go to the 
#	4510 Rasterizer and then to the 4692 colour ink jet copier.
tekr | tek4510 | 4510 | tekrasterizer :
	PLOP=	"\E^L":		# Make sure previous one is cleared.
	PLCL=	"\EKH" :	# Rasterizer HARDCOPY command.
	FILE=	"| lpr -Ptekr" :
	# FILE="| /usr/fuji/bin/tekit /dev/tty06":
	LIKE=	"tekc":
	:
 
# Mon Jan 22 16:47:29 PST 1990 (dredge--stanford)
# Simple plotcap commands to be sent to device specific plotting programs
#	like 'sunviewgplot' for plotting in sunView or 'x11gplot' for plotting
#	to X servers.
#
# written:  Michael Eldredge (dec 86)
# Modified: MJE -- Stanford (jul 88) Fixed Draw Mode name (MD->DM)
# Modified: MJE -- Stanford (aug 88) New INIT sequence -- return real size.
# Modified: MJE -- Stanford (sep 89) Added sync calls to the tool.

# I. Textual Version (vs. the binary version coming soon...)
window-a | tool-a :		# Ascii tool protocol
	VECT:
	# Note that PIXX and PIXY must also show up in init.
	PIXX = 360:
	PIXY = 360:
	PUNX = 90:	# for the Suns.
	PUNY = 90:
	INIT = %d=I; " "; %d=J; "INSZ"; .READ; I=%d; J=%d:
#	INIT = "360 360 IN":
	PEND = "SY"; .READ; "EN":
	GTOA = "SY"; .READ:	# just make sure that the buffer is received
	PCLR = "CL":
	PEN  = %d = S; "PE":	# change pen size.
	LINE = %d = S; "LN":	# change line type.
	MSET = "1DM":
	MCLR = "2DM":
	MCMP = "3DM":
	FILS = %d = S; "AF":	# Fill pattern.
	AREA = pnts; "AB"; *apnts; "AE":
	apnts= pnts; "AP":
	pnts = %d = I; ' '; %d = J:
	# -------------------------------------------------
	# I.  Use move and draw. Slightly less data to xmit.
	MOVE = pnts; "MV" :
	DRAW = pnts; "DR" :
	# II. Use segment drawing.
	#DRAW =	.P0; pnts; ' ';
	#	.P1; pnts; "SG";
	#	:
	# -------------------------------------------------
	CLOC = "WH" ;		# WHere is it?
		.READ ;
		I = %d; J = %d ; S = %d ;
		:
	:

# Ia. specific for Suns with SunView (the Notifier).
sunview | sun :
	FILE = "|| /usr/local/lib/sunviewgplot":
	!LINE:
	!PEN :
	!AREA:
	!CLOC:
	LIKE = "window-a":
	:

# Ib. specific for X servers.
X | xterm | xterms | xwindow | X-suns:
	# Note that x11gplot will return CLOC infor, so double pipe.
	FILE = "|| /usr/local/lib/x11gplot":
	!LINE:
	!AREA:
	!PEN:
	LIKE = "window-a":
	:

# Ic. specific for COLOR X servers.
#  Here LINE and AREA are not turned off ('!')
Xc | xtermc | xtermsc | xterm-c | xterms-c :
	# Note that x11gplot will return CLOC infor, so double pipe.
	FILE = "|| /usr/local/lib/x11gplot":
	!PEN:
	LIKE = "window-a":
	:

 
# Simulate the old tplot files.
#  19may86mje: Well the floating point support is back.  This is for backwards
#	compat and also just to illustrate what can be done....
#	dplot can read these save files with the -t option.
tplot:
	SAVE:
	SFORM=	r3 = OB; 
		% = 0; 			# just save room for byte count
		r7 = BC;		# r7 will have byte count.
		% = X;			# output a raw float.
		% = Y;			# output a raw float.
		r0 = C;
		r1 = r0 - 33;		# a linetype command?
		r1 ? != $1;
		  r0 = -S;		# map to -linetype command
	   1$;	% = r0;
		r7 = BC - r7 ;		# record size in bytes.
		%@r3 = r7;
		% = r7;
		:
	:
 
# raster tty.
#   (Another of the `fun' devices, although this has proved useful at times
#    in debugging or on terminals w/o graphics.)
rtty:
	RAST:
	PLOP=	"plot.open\n":
	PLCL=	"plot.close\n":
	INIT=	"init\n":
	PEND=	"pend\n":
	PCLR=	"clear.next.plot\n":
	BFCL=	"\n":
	PIXX=72:  PIXY=25:
	PUNX=8:   PUNY=5:
	RPXB=1:
	PIVL=040:
	:
 
# vt240/vt241 Digital Equipment Corp. graphics (REGIS) terminals
# Note that the vt240 seems to get overrun losing characters if the
#   terminal is run > 4800 baud.  This results in random garbage being
#   printed on the screen.  The BFSZ parameter is set to a smaller
#   buffers size hoping to help out -- smaller chunks to digest. 
#   Not having a vt240 on which to test this theory, I will wait to
#   see what the users say.  dredge/jan89.
#
# Written:  Dick Roy (dick@isl.standford.edu) 08 Oct 85
# Modified: Dredge -- Stanford (jan 89) Set smaller buffer size.
vt240 | vt241:
	VECT:
	BFSZ=	128:		# will this help at >4800 ????
	PIXX=	800:
	PIXY=	480:
	PUNX=	88:
	PUNY=	80:
	ICLR:			# clearing before any drawing is OK.
	DRAW=	.P0; moveto; .P1; *drawto:
	moveto=	"P[";  %d = I; ",";  %d = 480 - J; "]" :
	drawto=	"V[";  %d = I; ",";  %d = 480 - J; "]" :
#	MOVE=	"P[";  %d = I; ",";  %d = 480 - J; "]" :
#	DRAW=	"V[";  %d = I; ",";  %d = 480 - J; "]" :
	ATOG=	"\EPp" :
	GTOA=	"\E/a" :
	PLCL=	"\E/"; .READ :
	PLOP=	"\EPpS(E)" :
	INIT=	"\EPpS(E)" :
	PEND=	"\E/a" :	# the 'a' is present to prevent the loss
	PCLR=	"\023S(E)" :	#   of the first char sent to the terminal
	:			#   after plot termination.  Why this happens
 
# -------------------------------------------------------------------------
#  Some funky debug devices.......... (pseudo-devices).


# Fake save entry.  Useful with the program "mktp" to make 'tplot' files
#	This can go away when the 'tplot' entry works.  16jul85 dredge.
fake:
	VECT:
	PIXX=	100000:
	PIXY=	100000:
	PUNX=	10000:
	PUNY=	10000:
	PEND=	"99 0 0 0\n":
	LINE=	"33 "; %d=S; " 0 0\n":
	PCLR=	" 1 0 0 0\n":
	DRAW=	" 2 0 "; %d=I; " "; %d=J; "\n":
	MOVE=	" 3 0 "; %d=I; " "; %d=J; "\n":
	:

# The SUM entries are VERY, VERY useful for debugging code using the gplot
#	libraries.........

# Just testing.....;
sum | summary:		# summary w draws......
	VECT:
	PIXX=	10:	PIXY=	10:
	PUNX=	1: 	PUNY=	1:
	INIT=	"init\n":
	PEND=	"pend\n":
	LINE=	"line "; %d=S; "\n":
	PCLR=	"clear\n":
	AREA=	"define area\n":
	DRAW=	"Draw ("; r0=0; *pnts; %d=r0; " pnts)\n":
	MARK=	"Mark ["; %d ; "]\n":
	pnts=	r0=r0+1:
	:

sumv:
	DRAW=	"Draw "; %g=X; ","; %g=Y; "\n":
	MOVE=	"Move "; %g=X; ","; %g=Y; "\n":
	LIKE=	"sum":
	:

sumq | quick.summary:	# Like sum w/o draws ....
	!DRAW:
	LIKE="sum":
	:

# For debugging.... show just what is coming in....
show:
	SAVE:
	SFORM= %4d=C; %4d=S; ' '; %12g=X; ' '; %12g=Y; "\n":
	:

# For debugging.  dplot can very simply re-read this.
#  Save this to a file and dplot it: zow - a text meta/save file.
gplot:
	SAVE:
	SFORM="$gplot "; %d=C; ','; %d=S; ','; %g=X; ','; %g=Y; '\n':
	:

